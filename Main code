#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ------------------------------
# IMPORT REQUIRED LIBRARIES
# ------------------------------
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import category_encoders as ce
import graphviz
import lingam
from lingam.utils import make_dot, make_prior_knowledge
import warnings

# Suppress warnings for cleaner output
warnings.filterwarnings("ignore")  

# Debugging: Check execution environment
try:
    from IPython import get_ipython
    if get_ipython():
        print("‚úÖ Running in an interactive environment (e.g., Jupyter Notebook).")
    else:
        print("‚úÖ Running in a script execution environment.")
except:
    print("‚úÖ Standard execution mode detected.")

# ------------------------------
# LOAD THE DATASET
# ------------------------------
# Replace 'your_data.csv' with the actual file path
try:
    df = pd.read_csv("your_data.csv")
    print("‚úÖ Dataset loaded successfully!")
except Exception as e:
    print(f"‚ùå Error loading dataset: {e}")
    exit()

# Display the first few rows to check data
print("üîç First few rows of the dataset:")
print(df.head())

# ------------------------------
# DEFINE COLUMN NAMES
# ------------------------------
columns = [
    'Temperature\n?C (Min)', 'Temperature\n?C (Max)',
    'Dissolved Oxygen (mg/L) (Min)', 'Dissolved Oxygen (mg/L) (Max)',
    'pH (Min)', 'pH (Max)', 'Conductivity (?mhos/cm) (Min)',
    'Conductivity (?mhos/cm) (Max)', 'BOD (mg/L) (Min)', 'BOD (mg/L) (Max)',
    'Nitrate N + Nitrite N(mg/L) (Min)', 'Nitrate N + Nitrite N(mg/L) (Max)',
    'Fecal Coliform (MPN/100ml) (Min)', 'Fecal Coliform (MPN/100ml) (Max)',
    'Total Coliform (MPN/100ml) (Min)', 'Total Coliform (MPN/100ml) (Max)'
]

# ------------------------------
# PLOT DISTRIBUTIONS OF EACH FEATURE
# ------------------------------
print("üìä Generating histograms for each feature...")

fig, axes = plt.subplots(4, 4, figsize=(15, 10))
axes = axes.flatten()

for i, col in enumerate(columns):
    if col in df.columns:
        sns.histplot(df[col], kde=True, ax=axes[i])
        axes[i].set_title(col)

plt.tight_layout()
plt.show()

# ------------------------------
# PLOT BOXPLOTS BY 'Type Water Body'
# ------------------------------
print("üìä Generating boxplots for each feature grouped by 'Type Water Body'...")

fig, axes = plt.subplots(4, 4, figsize=(15, 10))
axes = axes.flatten()

for i, col in enumerate(columns):
    if col in df.columns:
        sns.boxplot(data=df, x='Type Water Body', y=col, ax=axes[i])
        axes[i].set_title(col)

plt.tight_layout()
plt.show()

# ------------------------------
# GENERATE CORRELATION HEATMAP
# ------------------------------
print("üìä Generating correlation heatmap...")

numeric_df = df.select_dtypes(include=['float64', 'int64'])
corr_matrix = numeric_df.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, cbar=False, cmap='Blues', fmt='.1f')
plt.title("Correlation Heatmap")
plt.show()

# ------------------------------
# PLOT RELATIONSHIPS BETWEEN VARIABLES
# ------------------------------
print("üìä Generating scatter plots with regression lines...")

pairs = [
    ('Temperature\n?C (Max)', 'Dissolved Oxygen (mg/L) (Max)'),
    ('Temperature\n?C (Min)', 'Dissolved Oxygen (mg/L) (Max)'),
    ('Temperature\n?C (Max)', 'Dissolved Oxygen (mg/L) (Min)'),
    ('Temperature\n?C (Min)', 'Dissolved Oxygen (mg/L) (Min)'),
    ('Conductivity (?mhos/cm) (Max)', 'pH (Max)'),
    ('Conductivity (?mhos/cm) (Min)', 'pH (Max)'),
    ('Conductivity (?mhos/cm) (Max)', 'pH (Min)'),
    ('Conductivity (?mhos/cm) (Min)', 'pH (Min)')
]

for x_col, y_col in pairs:
    if x_col in df.columns and y_col in df.columns:
        cleaned_df = df.dropna(subset=[x_col, y_col, 'Type Water Body'])
        cleaned_df[x_col] = pd.to_numeric(cleaned_df[x_col], errors='coerce')
        cleaned_df[y_col] = pd.to_numeric(cleaned_df[y_col], errors='coerce')

        sns.lmplot(data=cleaned_df, x=x_col, y=y_col, hue='Type Water Body')
        plt.title(f'{x_col} vs {y_col}')
        plt.show()

# ------------------------------
# DATA CLEANING & ENCODING
# ------------------------------
print("üõ†Ô∏è Cleaning and encoding data...")

# Drop unnecessary columns
if "STN\nCode" in df.columns and "Name of Monitoring Location" in df.columns:
    df1 = df.drop(["STN\nCode", "Name of Monitoring Location"], axis=1)
else:
    df1 = df.copy()

# Drop rows with any missing values
df1 = df1.dropna(how='any')

# Display missing values count
missing_values = pd.DataFrame(df1.isnull().sum()).T
print("üîç Missing values in dataset:")
print(missing_values)

# Convert columns to dictionary format for reference
df_list = df1.columns.to_list()
df_dict = {column: i for i, column in enumerate(df_list)}

print(f"‚úÖ Total features after cleaning: {len(df_list)}")

# ------------------------------
# SAVE CLEANED DATASET
# ------------------------------
output_filename = "cleaned_data.csv"
df1.to_csv(output_filename, index=False)
print(f"‚úÖ Cleaned dataset saved as {output_filename}")

# ------------------------------
# END OF SCRIPT
# ------------------------------
print("üéâ Data analysis and visualization completed successfully!")
